package TaskManager.Controller;

import TaskManager.Model.Task;
import TaskManager.Repository.TaskRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.NoSuchElementException;

import java.util.List;
import java.time.LocalDateTime;

@RestController // This means that this class is a Rest Controller
@RequestMapping(path = "/task") // This means URL's start with /task (after Application path)
public class TaskController {
    @Autowired // This means to get the bean called TaskRepository
    // Which is auto-generated by Spring, will be used to handle the data
    private TaskRepository TaskRepository;

    // redirects to show all tasks if URL is empty
    @GetMapping(path = "/task")
    public String redirectToAll() {
        return "redirect:/task/all";
    }

    // Creates a task with fields: title, description (optional), status and due date
    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewTask(@RequestParam String title, @RequestParam(required = false) String description, @RequestParam String status, @RequestParam LocalDateTime dueDate) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Task n = new Task();
        n.setTitle(title);
        n.setDescription(description);
        n.setStatus(status);
        n.setDueDate(dueDate);
        TaskRepository.save(n);
        return "Saved";
    }

    // Retrieves a specific task by the id
    @GetMapping(path = "/{id}")
    public @ResponseBody Task getTaskById(@PathVariable Long id) {
        return TaskRepository.findById(id).orElseThrow(() -> new RuntimeException("Task not found"));
    }

    // Retrieves all tasks
    @GetMapping(path = "/all")
    public @ResponseBody Iterable<Task> getAllTasks() {
        // This returns a JSON or XML with all tasks
        return TaskRepository.findAll();
    }

    // Finds a specific task by id and updates the status
    @PutMapping("/{id}/status")
    public ResponseEntity<Task> updateTaskStatus(@PathVariable Long id, @RequestBody Task incomingTask) {
        Task existingTask = TaskRepository.findById(id).orElseThrow(() -> new NoSuchElementException("Task does not exist with id: " + id));

        existingTask.setStatus(incomingTask.getStatus());

        TaskRepository.save(existingTask);

        return ResponseEntity.ok(existingTask);
    }

    // Deletes a specific task by id
    @DeleteMapping("/{id}")
    public ResponseEntity<Task> deleteTask(@PathVariable Long id) {
        Task existingTask = TaskRepository.findById(id).orElseThrow(() -> new NoSuchElementException("Task does not exist with id: " + id));

        TaskRepository.delete(existingTask);

        return ResponseEntity.ok(existingTask);
    }

    // Retrieves all tasks with a specific status (Not required for application, just for testing purposes)
    @GetMapping("/status/{status}")
    public @ResponseBody List<Task> getTasksByStatus(@PathVariable String status) {
        System.out.println("Looking for status: '" + status + "'");
        return TaskRepository.findByStatus(status);
    }

}